/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ui;


import Utils.UtilsFonction;
import dao.IUtilisateur;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;



import models.Utilisateur;

import services.UtilisateurServices;

/**
 *
 * @author DELL
 */
public class RegisterForm extends javax.swing.JFrame {

    
    private IUtilisateur iu;
  
  //  private List<Utilisateur> userL= new ArrayList<>();
  //  private List<Utilisateur> userL1 = new ArrayList<>();
    public RegisterForm() {
        try {
            initComponents();
            iu = new UtilisateurServices();
            setResizable(false);
            setLocationRelativeTo(null);
          

            clearField();
            //chargerRole();
            //for (RoleUtilisateur type : RoleUtilisateur.values()) {
            // role_choix.addItem(type.toString());
            //}
        } catch (Exception ex) {
            Logger.getLogger(RegisterForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void chargerRole() {
        
      // userL = iu.allUser();
      //  for (Utilisateur user : userL) {
       //    userL1.add( new Utilisateur(user.getUsername(), user.getEmail()));
            
      //  }
     //  iu.readUser(jTable1, userL1);
    }

    private boolean checkInput() {
        String username = username_txt.getText();
        char[] password = password_pf.getPassword();
        String passwordString = new String(password);
        char[] confirmPassword = confirmPassword_pf.getPassword();
        String confirmPasswordString = new String(confirmPassword);
        String role =role_txt.getText();
        

        return !(username.isBlank() ||  passwordString.isBlank() || confirmPasswordString.isBlank());
    }

    private void clearField() {
        username_txt.setText("");
       
        password_pf.setText("");
        confirmPassword_pf.setText("");
        role_txt.setText("");
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        confirmPassword_pf = new javax.swing.JPasswordField();
        password_pf = new javax.swing.JPasswordField();
        username_txt = new javax.swing.JTextField();
        inscription_btn = new javax.swing.JButton();
        connexion_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        role_txt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 228, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INSCRIPTION", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Username");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Password");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ConfirmPassword");

        confirmPassword_pf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPassword_pfActionPerformed(evt);
            }
        });

        password_pf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                password_pfActionPerformed(evt);
            }
        });

        username_txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                username_txtFocusLost(evt);
            }
        });
        username_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                username_txtActionPerformed(evt);
            }
        });

        inscription_btn.setBackground(new java.awt.Color(255, 204, 255));
        inscription_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        inscription_btn.setForeground(new java.awt.Color(255, 255, 255));
        inscription_btn.setText("Inscription");
        inscription_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inscription_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inscription_btnActionPerformed(evt);
            }
        });

        connexion_btn.setBackground(new java.awt.Color(255, 153, 153));
        connexion_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        connexion_btn.setForeground(new java.awt.Color(255, 255, 255));
        connexion_btn.setText("Connexion ?");
        connexion_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        connexion_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexion_btnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("INSCRIPTION");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Role");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(username_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(password_pf, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(confirmPassword_pf, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(role_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(inscription_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connexion_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(160, 160, 160))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(199, 199, 199))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel3)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password_pf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPassword_pf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(role_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(13, 13, 13)
                .addComponent(inscription_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connexion_btn)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void password_pfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_password_pfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_password_pfActionPerformed

    private void username_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_username_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_username_txtActionPerformed

    private void inscription_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inscription_btnActionPerformed
        try {
            if (!checkInput()) {
                JOptionPane.showMessageDialog(this, "Veillez remplir tous les champs",
                        "Erreur",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            String username = username_txt.getText();
            char[] password = password_pf.getPassword();
            String passwordString = new String(password);
            char[] confirmPassword = confirmPassword_pf.getPassword();
            String confirmPasswordString = new String(confirmPassword);
            String role =role_txt.getText();
            
            //role_choix.setSelectedItem(RoleUtilisateur.GESTIONNAIRE);
            if (!(passwordString.equals(confirmPasswordString))) {
                JOptionPane.showMessageDialog(this,
                        "Password not match",
                        "Erreur",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!username.matches("[a-zA-Z0-9]+")) {
                JOptionPane.showMessageDialog(null, "Erreur : Le username ne doit contenir que des lettres et des chiffres.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }
           
            
            if (!username.matches("[a-zA-Z0-9_]+")) {
                JOptionPane.showMessageDialog(null, "Erreur : Le nom d'utilisateur ne doit contenir que des lettres, des chiffres et des underscores.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (confirmPasswordString.length() < 8) {
                JOptionPane.showMessageDialog(null, "Erreur : Le mot de passe doit contenir au moins 8 caractères.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!confirmPasswordString.matches(".*[a-z].*")) {
                JOptionPane.showMessageDialog(null, "Erreur : Le mot de passe doit contenir au moins une lettre minuscule.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!confirmPasswordString.matches(".*[A-Z].*")) {
                JOptionPane.showMessageDialog(null, "Erreur : Le mot de passe doit contenir au moins une lettre majuscule.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!confirmPasswordString.matches(".*\\d.*")) {
                JOptionPane.showMessageDialog(null, "Erreur : Le mot de passe doit contenir au moins un chiffre.", "Erreur de validation", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String generatedPassword = null;

            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(passwordString.getBytes());
            byte[] bytes = md.digest();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();

           // Role r = roles.get(role_choix.getSelectedIndex());
           
            
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("MONSALONPU");
        EntityManager em = emf.createEntityManager();
        EntityTransaction transaction = em.getTransaction();
        transaction.begin(); 
        
        try {
            Utilisateur newUser = new Utilisateur(null, username, generatedPassword, role);
            em.persist(newUser);

            transaction.commit();
            JOptionPane.showMessageDialog(this, "Utilisateur enregistré avec succès", "Succès", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            if (transaction.isActive()) {
                transaction.rollback();
            }
            JOptionPane.showMessageDialog(this, "Erreur lors de l'inscription : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } finally {
            em.close();
            emf.close();
        }
        
        
            

        } catch (Exception ex) {
            Logger.getLogger(RegisterForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inscription_btnActionPerformed

    private void connexion_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexion_btnActionPerformed
        // Fermer le premier formulaire
        this.dispose();

        // Ouvrir le deuxième formulaire
        new SignInForm().setVisible(true);
    }//GEN-LAST:event_connexion_btnActionPerformed

    private void username_txtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_username_txtFocusLost
        // TODO add your handling code here:
          
           
    }//GEN-LAST:event_username_txtFocusLost

    private void confirmPassword_pfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPassword_pfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmPassword_pfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField confirmPassword_pf;
    private javax.swing.JButton connexion_btn;
    private javax.swing.JButton inscription_btn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField password_pf;
    private javax.swing.JTextField role_txt;
    private javax.swing.JTextField username_txt;
    // End of variables declaration//GEN-END:variables
}
